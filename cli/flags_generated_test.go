/*
Copyright 2017 Caicloud Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// This file was autogenerated by set-gen. Do not edit it manually!

package cli

import (
	"reflect"
	"testing"
	time "time"

	"github.com/spf13/cast"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
)

func TestBoolFlag(t *testing.T) {
	testcase := getTestCase("Bool")
	dest := new(bool)
	f := BoolFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToBoolE(testcase.want)
	if err != nil {
		t.Fatalf("TestBoolFlag(): can't convert %v to bool, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestBoolFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToBoolE(v)
	if err != nil {
		t.Fatalf("TestBoolFlag(): can't convert %v to bool, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestBoolFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestDurationFlag(t *testing.T) {
	testcase := getTestCase("Duration")
	dest := new(time.Duration)
	f := DurationFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToDurationE(testcase.want)
	if err != nil {
		t.Fatalf("TestDurationFlag(): can't convert %v to time.Duration, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestDurationFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToDurationE(v)
	if err != nil {
		t.Fatalf("TestDurationFlag(): can't convert %v to time.Duration, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestDurationFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestFloat32Flag(t *testing.T) {
	testcase := getTestCase("Float32")
	dest := new(float32)
	f := Float32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToFloat32E(testcase.want)
	if err != nil {
		t.Fatalf("TestFloat32Flag(): can't convert %v to float32, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestFloat32Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToFloat32E(v)
	if err != nil {
		t.Fatalf("TestFloat32Flag(): can't convert %v to float32, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestFloat32Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestFloat64Flag(t *testing.T) {
	testcase := getTestCase("Float64")
	dest := new(float64)
	f := Float64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToFloat64E(testcase.want)
	if err != nil {
		t.Fatalf("TestFloat64Flag(): can't convert %v to float64, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestFloat64Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToFloat64E(v)
	if err != nil {
		t.Fatalf("TestFloat64Flag(): can't convert %v to float64, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestFloat64Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestIntFlag(t *testing.T) {
	testcase := getTestCase("Int")
	dest := new(int)
	f := IntFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToIntE(testcase.want)
	if err != nil {
		t.Fatalf("TestIntFlag(): can't convert %v to int, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestIntFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToIntE(v)
	if err != nil {
		t.Fatalf("TestIntFlag(): can't convert %v to int, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestIntFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestInt32Flag(t *testing.T) {
	testcase := getTestCase("Int32")
	dest := new(int32)
	f := Int32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToInt32E(testcase.want)
	if err != nil {
		t.Fatalf("TestInt32Flag(): can't convert %v to int32, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestInt32Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToInt32E(v)
	if err != nil {
		t.Fatalf("TestInt32Flag(): can't convert %v to int32, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestInt32Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestInt64Flag(t *testing.T) {
	testcase := getTestCase("Int64")
	dest := new(int64)
	f := Int64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToInt64E(testcase.want)
	if err != nil {
		t.Fatalf("TestInt64Flag(): can't convert %v to int64, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestInt64Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToInt64E(v)
	if err != nil {
		t.Fatalf("TestInt64Flag(): can't convert %v to int64, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestInt64Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestStringFlag(t *testing.T) {
	testcase := getTestCase("String")
	dest := new(string)
	f := StringFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToStringE(testcase.want)
	if err != nil {
		t.Fatalf("TestStringFlag(): can't convert %v to string, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestStringFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToStringE(v)
	if err != nil {
		t.Fatalf("TestStringFlag(): can't convert %v to string, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestStringFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestStringSliceFlag(t *testing.T) {
	testcase := getTestCase("StringSlice")
	dest := new([]string)
	f := StringSliceFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToStringSliceE(testcase.want)
	if err != nil {
		t.Fatalf("TestStringSliceFlag(): can't convert %v to []string, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestStringSliceFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToStringSliceE(v)
	if err != nil {
		t.Fatalf("TestStringSliceFlag(): can't convert %v to []string, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestStringSliceFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestUintFlag(t *testing.T) {
	testcase := getTestCase("Uint")
	dest := new(uint)
	f := UintFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUintE(testcase.want)
	if err != nil {
		t.Fatalf("TestUintFlag(): can't convert %v to uint, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestUintFlag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToUintE(v)
	if err != nil {
		t.Fatalf("TestUintFlag(): can't convert %v to uint, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestUintFlag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestUint32Flag(t *testing.T) {
	testcase := getTestCase("Uint32")
	dest := new(uint32)
	f := Uint32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUint32E(testcase.want)
	if err != nil {
		t.Fatalf("TestUint32Flag(): can't convert %v to uint32, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestUint32Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToUint32E(v)
	if err != nil {
		t.Fatalf("TestUint32Flag(): can't convert %v to uint32, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestUint32Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}

func TestUint64Flag(t *testing.T) {
	testcase := getTestCase("Uint64")
	dest := new(uint64)
	f := Uint64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": []string{"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUint64E(testcase.want)
	if err != nil {
		t.Fatalf("TestUint64Flag(): can't convert %v to uint64, %v", testcase.want, err)
	}
	if !reflect.DeepEqual(*dest, want) {
		t.Fatalf("TestUint64Flag() = %v, want %v", *dest, want)
	}

	// test viper
	v := Viper.Get(f.Name)
	got, err := cast.ToUint64E(v)
	if err != nil {
		t.Fatalf("TestUint64Flag(): can't convert %v to uint64, %v", v, err)
	}
	if !reflect.DeepEqual(got, want) {
		t.Fatalf("TestUint64Flag().Viper = %v, want %v", got, want)
	}
	// reset viper
	Viper = viper.New()

}
