/*
Copyright 2017 Caicloud Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by set-gen. Do not edit it manually!

package cli

import (
	"testing"
	time "time"

	"github.com/spf13/cast"
	"github.com/spf13/pflag"
	"github.com/stretchr/testify/assert"
)

func TestBoolFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Bool")
	dest := new(bool)
	f := BoolFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToBoolE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToBoolE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestDurationFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Duration")
	dest := new(time.Duration)
	f := DurationFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToDurationE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToDurationE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestFloat32Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Float32")
	dest := new(float32)
	f := Float32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToFloat32E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToFloat32E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestFloat64Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Float64")
	dest := new(float64)
	f := Float64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToFloat64E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToFloat64E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestIntFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Int")
	dest := new(int)
	f := IntFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToIntE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToIntE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestInt32Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Int32")
	dest := new(int32)
	f := Int32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToInt32E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToInt32E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestInt64Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Int64")
	dest := new(int64)
	f := Int64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToInt64E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToInt64E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestStringFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("String")
	dest := new(string)
	f := StringFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToStringE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToStringE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestStringSliceFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("StringSlice")
	dest := new([]string)
	f := StringSliceFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToStringSliceE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToStringSliceE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestUintFlag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Uint")
	dest := new(uint)
	f := UintFlag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUintE(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToUintE(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestUint32Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Uint32")
	dest := new(uint32)
	f := Uint32Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUint32E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToUint32E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}

func TestUint64Flag(t *testing.T) {
	// reset viper
	Reset()

	testcase := getTestCase("Uint64")
	dest := new(uint64)
	f := Uint64Flag{
		Name:                "test",
		Shorthand:           "t",
		Usage:               "help",
		Persistent:          true,
		Annotations:         map[string][]string{"key": {"value"}},
		Deprecated:          "for test",
		ShorthandDeprecated: "for test",
		Hidden:              true,
		EnvKey:              "TEST",
		DefValue:            *dest,
		Destination:         dest,
	}

	f.IsPersistent()
	f.GetName()

	fs := pflag.NewFlagSet("dev", pflag.ContinueOnError)
	f.ApplyTo(fs)

	// test flag
	fs.Parse([]string{"-t=" + testcase.flag})
	want, err := cast.ToUint64E(testcase.want)
	assert.Nil(t, err)
	assert.Equal(t, want, *dest)

	// test viper
	v := v.Get(f.Name)
	got, err := cast.ToUint64E(v)
	assert.Nil(t, err)
	assert.Equal(t, want, got)

}
